<mxfile host="Electron" modified="2022-07-20T03:37:26.637Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36" etag="vlmQ8lDWuL4MRxwC_VyJ" compressed="false" version="19.0.3" type="device">
  <diagram id="Ept2FJPIgKsxj1wXv_1l" name="codebase">
    <mxGraphModel dx="1054" dy="720" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontColor=#009900;" edge="1" parent="1" source="s_7NhuDoVrrTPyYPx8Ee-2" target="s_7NhuDoVrrTPyYPx8Ee-11">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="650" y="320" />
              <mxPoint x="650" y="190" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-22" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontColor=#009900;" edge="1" parent="1" source="s_7NhuDoVrrTPyYPx8Ee-2" target="s_7NhuDoVrrTPyYPx8Ee-19">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-2" value="main.py" style="swimlane;fontColor=#0000CC;" vertex="1" parent="1">
          <mxGeometry x="155" y="120" width="480" height="400" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-3" value="&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;create model&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;model = YOWO(cfg)&lt;/span&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-2">
          <mxGeometry y="30" width="240" height="30" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-8" value="&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;&amp;nbsp;create optimizer&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;&lt;br&gt;&lt;/font&gt;parameters = get_fine_tuning_parameters(model, cfg)&lt;br&gt;&lt;font color=&quot;#000000&quot;&gt;optimizer =&amp;nbsp;torch.optim.Adam (*)&lt;/font&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-2">
          <mxGeometry y="70" width="310" height="60" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-9" value="&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&amp;nbsp;&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;load dataset &amp;amp; training&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;&amp;nbsp;#####&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;&lt;br&gt;&lt;/font&gt;train_dataset = Ava(cfg, split=&#39;train&#39;, only_detection=False)&lt;br&gt;test_dataset&amp;nbsp; = Ava(cfg, split=&#39;val&#39;, only_detection=False)&lt;br&gt;&lt;br&gt;&lt;div&gt;t&lt;font color=&quot;#000000&quot;&gt;rain_loader = torch.utils.data.DataLoader(train_dataset, *)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;test_loader = torch.utils.data.DataLoader(test_dataset, *)&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;loss_module&amp;nbsp; &amp;nbsp;= RegionLoss_Ava(cfg)&amp;nbsp; &lt;font color=&quot;#009900&quot;&gt;# binary_FocalLoss and build groud truth inside&amp;nbsp;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;font color=&quot;#009900&quot;&gt;# meter.py to computes and stores the average and current value (mAP)&lt;/font&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#009900&quot;&gt;# per epoch&lt;/font&gt;&lt;/div&gt;&lt;div&gt;lr_new = adjust_learning_rate(optimizer, epoch, cfg)&lt;br&gt;&lt;/div&gt;&lt;div&gt;train(cfg, epoch, model, train_loader, loss_module, optimizer)&lt;br&gt;&lt;/div&gt;&lt;div&gt;score = test(cfg, epoch, model, test_loader)&lt;br&gt;&lt;/div&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;{store best score and model}&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;&lt;br&gt;&lt;/span&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-2">
          <mxGeometry y="140" width="470" height="240" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-10" value="datasets/ava_dataset.py" style="swimlane;fontColor=#0000CC;" vertex="1" parent="1">
          <mxGeometry x="680" y="100" width="620" height="160" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-11" value="&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#990000&quot;&gt;Class Ava&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#009900&quot;&gt;# contains preprocessing func, e.g. augmentation(slow-fast, zoom-in, label), normalization&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;def _load_data(cfg) &lt;/font&gt;&lt;font color=&quot;#009900&quot;&gt;# load frame paths and annotations from files&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#009900&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;def _images_and_boxes_preprocessing_cv2(self, imgs, boxes):&amp;nbsp; &lt;/font&gt;&lt;font color=&quot;#009900&quot;&gt;# return images in HWC/CHW, BGR format&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;/div&gt;&lt;span style=&quot;color: rgb(0, 0, 0); white-space: pre;&quot;&gt;	&lt;/span&gt;boxes = cv2_transform.clip_boxes_to_image(boxes, height, width)" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-10">
          <mxGeometry y="30" width="590" height="120" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-15" value="datasets/cv2_transform.py" style="swimlane;fontColor=#0000CC;" vertex="1" parent="1">
          <mxGeometry x="680" y="310" width="590" height="110" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-16" value="&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;&amp;nbsp;augmentor, scaler, x1y1x2y2 to HWC/CHW&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;color: rgb(0, 153, 0);&quot;&gt;#####&lt;/span&gt;&lt;font color=&quot;#009900&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;#000000&quot;&gt;def cdet_preprocess(images, boxes, pad=31, mean=[0.45, 0.45, 0.45]) &lt;/font&gt;&lt;font color=&quot;#009900&quot;&gt;#&amp;nbsp;Forms a border around an image&lt;/font&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-15">
          <mxGeometry y="30" width="580" height="70" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-18" value="" style="endArrow=classic;html=1;rounded=0;fontColor=#009900;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="s_7NhuDoVrrTPyYPx8Ee-11" target="s_7NhuDoVrrTPyYPx8Ee-15">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="810" y="250" as="sourcePoint" />
            <mxPoint x="860" y="200" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-19" value="core/model.py" style="swimlane;fontColor=#0000CC;" vertex="1" parent="1">
          <mxGeometry x="155" y="560" width="495" height="380" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-20" value="&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;Class YOWO&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#009900&quot;&gt;##### Attention &amp;amp; Final Conv #####&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(153, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;self.cfam = CFAMBlock(num_ch_2d+num_ch_3d, 1024)&amp;nbsp;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;# channel attention model&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; # conv_bn_relu1/&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;conv_bn_relu2/CAM_Module/&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 153, 0); background-color: initial;&quot;&gt;conv_bn_relu3/conv_out&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(153, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;font color=&quot;#000000&quot;&gt;self.conv_final = nn.Conv2d(1024, 5*(cfg.MODEL.NUM_CLASSES+4+1), *)&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;def forward(self, input):&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;x_3d = input # Input clip&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;x_2d = input[:, :, -1, :, :] # Last frame of the clip that is read&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/font&gt;&amp;nbsp;x_2d = self.backbone_2d(x_2d)&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/font&gt;x_3d = self.backbone_3d(x_3d)&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;x_3d = torch.squeeze(x_3d, dim=2)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;x = torch.cat((x_3d, x_2d), dim=1)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/font&gt;x = self.cfam(x)&amp;nbsp; &amp;nbsp;&lt;font color=&quot;#009900&quot;&gt;# attention&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;out = self.conv_final(x)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;return out&lt;/span&gt;&amp;nbsp;&lt;/font&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-19">
          <mxGeometry y="30" width="480" height="340" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-23" value="backbone_3d//resnet.py" style="swimlane;fontColor=#0000CC;" vertex="1" parent="1">
          <mxGeometry x="680" y="470" width="460" height="860" as="geometry" />
        </mxCell>
        <mxCell id="s_7NhuDoVrrTPyYPx8Ee-24" value="&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;Class BasicBlock&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;def forward(self, x):&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; residual = x&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.conv1(x)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.bn1(out)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.relu(out)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.conv2(out)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.bn2(out)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; if self.downsample is not None:&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; residual = self.downsample(x)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out += residual&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.relu(out)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;&quot;&gt;&lt;font color=&quot;#990000&quot;&gt;Class&amp;nbsp;Bottleneck&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#000000&quot;&gt;def forward(self, x):&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; residual = x&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.conv1(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.bn1(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.relu(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.conv2(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.bn2(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.relu(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.conv3(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.bn3(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; if self.downsample is not None:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; residual = self.downsample(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out += residual&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; out = self.relu(out)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#990000&quot;&gt;Class&amp;nbsp;ResNet&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;def forward(self, x):&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.conv1(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.bn1(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.relu(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.maxpool(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.layer1(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.layer2(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.layer3(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; x = self.layer4(x)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; if x.size(2) == 2:&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x = self.avgpool(x)&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;fontColor=#0000CC;align=left;" vertex="1" parent="s_7NhuDoVrrTPyYPx8Ee-23">
          <mxGeometry y="30" width="410" height="820" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
